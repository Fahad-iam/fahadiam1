import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
import numpy as np

# ุชููุฆุฉ ุงูุตูุญุฉ
st.set_page_config(
    page_title="ููุญุฉ ูุชุงุจุนุฉ ุนููุฏ ุงูุฅูุฌุงุฑ",
    page_icon="๐ข",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ุชุญููู ุงูุจูุงูุงุช
data = {
    "ุงููุฑุน": [
        "ุงูุฑูุงู ุจุฑูุฏุฉ", "ุงูุจุณุงุชูู ุจุฑูุฏุฉ", "ุงูุฑุจูุฉ", "ุงูุณูู", "ุงูุดูุงุก", "ุงูุนุฒูุฒูุฉ",
        "ุงูุนูุงูู", "ุงูููุงุญ", "ุงููุฏุณ", "ุงูููุฒ", "ุงูููุฏูุฉ", "ุงููุฑุฌุณ", "ุงููุฑููู", 
        "ูุฑุทุจุฉ", "ูุจู", "ูุฎุฑุฌ 27", "ูุณุชูุฏุน ุงูุนุฒูุฒูุฉ", "ุณูู ุงูููุงุญ", "ุงูุตุญุงูุฉ", 
        "ุณูู ูุจู ููุนูุงู", "ูุจูู ุงูุตุญุงุจุฉ"
    ],
    "ุชุงุฑูุฎ ุงูุงุณุชุญูุงู ุงูุฏูุนุฉ ุงูุฃููู": [
        "11/02/25", "25/02/25", "25/04/25", "11/05/25", "11/01/25", "25/03/25",
        "07/10/25", "01/06/25", "", "", "11/06/25", "19/05/25", "03/02/25", 
        "11/04/25", "27/04/25", "", "01/01/25", "", "05/04/25", "", "11/04/25"
    ],
    "ุชุงุฑูุฎ ุงุณุชุญูุงู ุงูุฏูุนุฉ ุงูุซุงููุฉ": [
        "11/08/25", "25/08/25", "25/10/25", "11/11/25", "11/07/25", "25/09/25",
        "ูุง ููุฌุฏ", "02/12/25", "", "", "11/12/25", "19/11/25", "ูุง ููุฌุฏ", 
        "11/10/25", "27/10/25", "", "", "", "06/10/25", "", "11/10/25"
    ],
    "ูููุฉ ุงูุฅูุฌุงุฑ": [
        132250, 74167, 47021, 70000, 60375, 50000, 80500, 146250, 600000, 
        80500, 67500, 109250, 73000, 168550, None, 139151, 90563, 4600, 
        166000, 75000, 160889
    ],
    "ุงููููุฉ ุงูุณูููุฉ": [
        230000, 148333, 78334, 140000, 105000, 100000, 70000, 250000, 120000, 
        140000, 135000, 190000, 146000, 290000, None, 249561, 157500, 55200, 
        280000, 75000, 260000
    ],
    "ุจุฏุงูุฉ ุงูุนูุฏ": [
        "01/02/23", "15/02/23", "15/04/22", "01/11/22", "01/01/22", "15/09/21",
        "27/09/22", "22/05/23", "01/12/22", "01/06/23", "09/05/23", "24/01/23", 
        "01/10/24", "17/10/24", "", "06/10/22", "07/06/24", "01/07/24", 
        "26/03/25", "01/01/25", "01/04/25"
    ],
    "ููุงูุฉ ุงูุนูุฏ": [
        "31/01/28", "14/02/29", "14/04/28", "31/10/26", "31/12/27", "14/09/26",
        "26/09/28", "21/05/28", "30/11/27", "31/05/26", "08/05/28", "23/07/25", 
        "13/03/27", "16/10/29", "", "25/06/25", "06/06/25", "30/06/25", 
        "25/03/28", "31/12/25", "31/03/30"
    ]
}

df = pd.DataFrame(data)

# ุชุญููู ุงูุชูุงุฑูุฎ
def convert_date(date_str):
    if not date_str or date_str.strip() == "":
        return None
    try:
        return datetime.strptime(date_str, "%d/%m/%y")
    except:
        return None

# ุชุทุจูู ุงูุชุญููู ุนูู ุฃุนูุฏุฉ ุงูุชูุงุฑูุฎ
date_columns = [
    'ุชุงุฑูุฎ ุงูุงุณุชุญูุงู ุงูุฏูุนุฉ ุงูุฃููู', 
    'ุชุงุฑูุฎ ุงุณุชุญูุงู ุงูุฏูุนุฉ ุงูุซุงููุฉ',
    'ุจุฏุงูุฉ ุงูุนูุฏ',
    'ููุงูุฉ ุงูุนูุฏ'
]

for col in date_columns:
    df[col] = df[col].apply(convert_date)

# ุญุณุงุจ ุญุงูุฉ ุงูุนููุฏ
current_date = datetime.now()
df['ุญุงูุฉ ุงูุนูุฏ'] = df.apply(lambda row: 
    'ูุดุท' if (pd.isna(row['ููุงูุฉ ุงูุนูุฏ']) or (row['ููุงูุฉ ุงูุนูุฏ'] > current_date)) 
    else 'ููุชูู', axis=1)

# ูุงุฌูุฉ ุงููุณุชุฎุฏู
st.title('ููุญุฉ ูุชุงุจุนุฉ ุนููุฏ ุงูุฅูุฌุงุฑ ๐ข')
st.markdown("""
<style>
.arabic-text {
    direction: rtl;
    text-align: right;
    font-family: 'Arial', sans-serif;
}
</style>
""", unsafe_allow_html=True)

# ุงูููุงุชุฑ
st.sidebar.header('ุฎูุงุฑุงุช ุงูุชุตููุฉ')

# ููุชุฑุฉ ุญุณุจ ุญุงูุฉ ุงูุนูุฏ
contract_status = st.sidebar.multiselect(
    'ุญุงูุฉ ุงูุนูุฏ',
    options=df['ุญุงูุฉ ุงูุนูุฏ'].unique(),
    default=df['ุญุงูุฉ ุงูุนูุฏ'].unique()
)

# ููุชุฑุฉ ุญุณุจ ุงููุฑุน
branch_filter = st.sidebar.multiselect(
    'ุงููุฑุน',
    options=df['ุงููุฑุน'].unique(),
    default=df['ุงููุฑุน'].unique()
)

# ููุชุฑุฉ ุญุณุจ ุงููููุฉ ุงูุณูููุฉ
min_value, max_value = st.sidebar.slider(
    'ูุทุงู ุงููููุฉ ุงูุณูููุฉ',
    min_value=0,
    max_value=int(df['ุงููููุฉ ุงูุณูููุฉ'].max()) if not df['ุงููููุฉ ุงูุณูููุฉ'].isna().all() else 300000,
    value=(0, int(df['ุงููููุฉ ุงูุณูููุฉ'].max()) if not df['ุงููููุฉ ุงูุณูููุฉ'].isna().all() else 300000)
)

# ุชุทุจูู ุงูููุงุชุฑ
filtered_df = df[
    (df['ุญุงูุฉ ุงูุนูุฏ'].isin(contract_status)) &
    (df['ุงููุฑุน'].isin(branch_filter)) &
    (df['ุงููููุฉ ุงูุณูููุฉ'].between(min_value, max_value))
]

# ุงูุฅุญุตุงุฆูุงุช ุงูุฑุฆูุณูุฉ
col1, col2, col3, col4 = st.columns(4)
col1.metric("ุนุฏุฏ ุงูุนููุฏ", len(filtered_df))
col2.metric("ุฅุฌูุงูู ุงูููู ุงูุณูููุฉ", f"{filtered_df['ุงููููุฉ ุงูุณูููุฉ'].sum():,.0f} ุฑูุงู")
col3.metric("ูุชูุณุท ุงููููุฉ ุงูุณูููุฉ", f"{filtered_df['ุงููููุฉ ุงูุณูููุฉ'].mean():,.0f} ุฑูุงู" if not filtered_df.empty else "0")
col4.metric("ุงูุนููุฏ ุงููุดุทุฉ", f"{len(filtered_df[filtered_df['ุญุงูุฉ ุงูุนูุฏ'] == 'ูุดุท'])}")

# ุนุฑุถ ุงูุจูุงูุงุช
st.subheader('ุจูุงูุงุช ุงูุนููุฏ')
st.dataframe(filtered_df, height=400, use_container_width=True)

# ุงููุฎุทุทุงุช
st.subheader('ุชุญูููุงุช ุงูุนููุฏ')

tab1, tab2, tab3 = st.tabs(["ุงููููุฉ ุงูุณูููุฉ", "ูุฏุฉ ุงูุนููุฏ", "ุชูุฒูุน ุงูุนููุฏ"])

with tab1:
    fig = px.bar(
        filtered_df.sort_values('ุงููููุฉ ุงูุณูููุฉ', ascending=False),
        x='ุงููุฑุน',
        y='ุงููููุฉ ุงูุณูููุฉ',
        title='ุงููููุฉ ุงูุณูููุฉ ููุฅูุฌุงุฑ ุญุณุจ ุงููุฑุน',
        color='ุญุงูุฉ ุงูุนูุฏ',
        text='ุงููููุฉ ุงูุณูููุฉ'
    )
    fig.update_traces(texttemplate='%{text:,.0f}', textposition='outside')
    st.plotly_chart(fig, use_container_width=True)

with tab2:
    # ุญุณุงุจ ูุฏุฉ ุงูุนููุฏ (ุจุงูุฃุดูุฑ)
    filtered_df['ูุฏุฉ ุงูุนูุฏ (ุดูุฑ)'] = filtered_df.apply(
        lambda row: ((row['ููุงูุฉ ุงูุนูุฏ'] - row['ุจุฏุงูุฉ ุงูุนูุฏ']).days / 30) 
        if not pd.isna(row['ููุงูุฉ ุงูุนูุฏ']) and not pd.isna(row['ุจุฏุงูุฉ ุงูุนูุฏ']) 
        else None, axis=1
    )
    
    fig = px.scatter(
        filtered_df,
        x='ุงููููุฉ ุงูุณูููุฉ',
        y='ูุฏุฉ ุงูุนูุฏ (ุดูุฑ)',
        size='ุงููููุฉ ุงูุณูููุฉ',
        color='ุงููุฑุน',
        hover_name='ุงููุฑุน',
        title='ุงูุนูุงูุฉ ุจูู ุงููููุฉ ุงูุณูููุฉ ููุฏุฉ ุงูุนูุฏ'
    )
    st.plotly_chart(fig, use_container_width=True)

with tab3:
    fig = px.pie(
        filtered_df,
        names='ุญุงูุฉ ุงูุนูุฏ',
        values='ุงููููุฉ ุงูุณูููุฉ',
        title='ุชูุฒูุน ุงููููุฉ ุงูุณูููุฉ ุญุณุจ ุญุงูุฉ ุงูุนูุฏ'
    )
    st.plotly_chart(fig, use_container_width=True)

# ุฌุฏูู ุงูุนููุฏ ุงููุฑูุจุฉ ูู ุงูุงูุชูุงุก
st.subheader('ุงูุนููุฏ ุงููุฑูุจุฉ ูู ุงูุงูุชูุงุก')
near_end = filtered_df.copy()
near_end['ุฃูุงู ูุชุจููุฉ'] = near_end.apply(
    lambda row: (row['ููุงูุฉ ุงูุนูุฏ'] - current_date).days 
    if not pd.isna(row['ููุงูุฉ ุงูุนูุฏ']) and row['ููุงูุฉ ุงูุนูุฏ'] > current_date 
    else None, axis=1
)
near_end = near_end.dropna(subset=['ุฃูุงู ูุชุจููุฉ'])
near_end = near_end.sort_values('ุฃูุงู ูุชุจููุฉ').head(5)
st.dataframe(near_end[['ุงููุฑุน', 'ููุงูุฉ ุงูุนูุฏ', 'ุฃูุงู ูุชุจููุฉ', 'ุงููููุฉ ุงูุณูููุฉ']], 
             height=200, use_container_width=True)

# ููุงุญุธุงุช
st.info("""
**ููุงุญุธุงุช:**
- ุชู ุชุญููู ุงูุชูุงุฑูุฎ ุฅูู ุงูุตูุบุฉ ุงูุตุญูุญุฉ ุชููุงุฆููุง
- ุงูุนููุฏ ุงูุชู ุชุญุชูู ุนูู ููู ููููุฏุฉ ุชู ุงูุชุนุงูู ูุนูุง ุจุดูู ุตุญูุญ
- ูููู ุชุตุฏูุฑ ุงูุจูุงูุงุช ุจุงูุถุบุท ุนูู ุฃููููุฉ ุงูุชุตุฏูุฑ ุฃุนูู ุงูุฌุฏูู
""")
